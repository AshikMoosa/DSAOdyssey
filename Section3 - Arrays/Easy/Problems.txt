Problem-1
Given an array A[] of size n. The task is to find the largest element in it.
 
Example 1:

Input:
n = 5
A[] = {1, 8, 7, 56, 90}
Output:
90
Explanation:
The largest element of given array is 90.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 <= n<= 10^3
0 <= A[i] <= 10^3
Array may contain duplicate elements. 

Problem-2
Given an array, find the second smallest and second largest element in the array. Print ‘-1’ in the event that either of them doesn’t exist.

Input:
n = 5
A[] = {1, 2, 3, 4, 4}
Output:
[3,2]
Explanation:
The seclargest is 3 and secSmallest is 2

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
2 <= n<= 10^5
0 <= A[i] <= 10^9
Array may contain duplicate elements. 

Problem-3
Given an array arr[] of size N, check if it is sorted in non-decreasing order or not. 

Example 1:

Input:
N = 5
arr[] = {10, 20, 30, 40, 50}
Output: 1
Explanation: The given array is sorted.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ N ≤ 10^5
1 ≤ Arr[i] ≤ 10^6

Problem-4
Given a sorted array A[] of size N, delete all the duplicated elements from A[]. 
Modify the array such that if there are X distinct elements in it then the first X positions of the array should be filled with them in increasing order 
and return the number of distinct elements in the array.

Note:
1. Don't use set or HashMap to solve the problem.
2. You must return the number of distinct elements(X) in the array, the driver code will print all the elements of the modified array from index 0 to X-1 as output of your code.

Example 1:

Input:
N = 5
Array = {2, 2, 2, 2, 2}
Output: 2
Explanation: After removing all the duplicates only one instance of 2 will remain i.e. {2} so modify array will contains 2 at first position and you should return 1 after modify the array.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ N ≤ 10^4
1 ≤ A[i] ≤ 10^6

Problem-5
Given an array of N integers, left rotate the array by one place.

Example 1:
Input: N = 5, 
array[] = {1,2,3,4,5}
Output: 2,3,4,5,1

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 <= N <= 10^6
1 <= D <= 10^6
0 <= arr[i] <= 10^5

Problem-6
Given an unsorted array arr[] of size N. Rotate the array to the left (counter-clockwise direction) by D steps, where D is a positive integer. 

Example 1:

Input:
N = 5, D = 2
arr[] = {1,2,3,4,5}
Output: 3 4 5 1 2
Explanation: 1 2 3 4 5  when rotated
by 2 elements, it becomes 3 4 5 1 2.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 <= N <= 10^6
1 <= D <= 10^6
0 <= arr[i] <= 10^5

Problem-7
Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]

Constraints:

1 <= nums.length <= 10^4
-2^31 <= nums[i] <= 2^31 - 1

Problem-8
Given an array, and an element num the task is to find if num is present in the given array or not. If present print the index of the element or print -1

Example 1:

Input:
5 4
6 7 8 4 1
Output:
3
Explanation: 4 is present at the 3rd index.