#Hashing

-Hashing is a popular technique used for storing and retrieving data as fast as possible. 
-The main reason behind using hashing is that it performs insertion, deletion, searching, and other operations 
-The basic idea behind hashing is to map keys (data) to specific locations (hash codes) in the hash table, 
allowing for quick access to the values associated with those keys.
-Hashing is widely used for implementing objects, sets, and other data structures in JavaScript to optimize data retrieval operations.

#Why use Hashing?

-In hashing, all the operations like inserting, searching, and deleting can be performed in O(1) i.e. constant time(BestCase)
Time Complexity: 
 -Best Case: O(1)    - When the hash function distributes the keys uniformly across the hash table and there are no or very few collisions.
 -Average Case: O(1) -  For a well-designed hash function and a reasonably-sized hash table, the average time complexity is O(1), assuming a uniform distribution of keys.
 -Worst Case: O(n)   - when there are many collisions and the hash table becomes inefficient due to clustering, where n is the number of key-value pairs in the hash table.
Space complexity of a hash table is O(n)

#Overview 

-Hash Function: The heart of hashing is the hash function. It takes a key as input and converts it into a fixed-size integer (hash code). 
 The hash code determines the index in the hash table where the data will be stored or retrieved.

-Hash Table: A hash table is an array that stores key-value pairs. Each element in the array corresponds to a slot or bucket in the hash table. 
 The hash code is used to determine which slot the data will be stored in.

-Collision Handling: In some cases, different keys might result in the same hash code, leading to collisions. 
 Collision handling techniques, such as chaining (using linked lists in each slot) or open addressing, are used to resolve collisions and efficiently store multiple values with the same hash code.

