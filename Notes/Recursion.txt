#Recursion
A recursive function is a function that calls itself somewhere within the body of the function. Below is a basic example of a recursive function.

function recursiveFunc() {
  // some code here... 
  recursiveFunc()
}
As you can see, the recursiveFunc function calls itself within the body of the function. It will repeat calling itself until the desired output is achieved.

The Three Parts of a Recursive Function:
-The function definition.
-The base condition.
-The recursive call.

#How to define a recursive function definition?
You define a recursive function the same way you define regular JavaScript functions.

function recursiveFunc() {
  // some code here...
} 

#What is a base condition?
When using a recursive function, the base condition is what lets the function know when to stop calling itself. Once the base condition is met, the recursion ends.

function recursiveFunc() {
  if(base condition) {
    // stops recursion if condition is met
  }
  // else recursion continues
  recurse();
}

#What is Stack overflow?
Without the base condition, you will run into infinite recursion. A situation where your function continues calling itself without stopping.
Also, without a base condition, your function exceeds the maximum call stack results in stack overflow


#What is Recursive Call?
The recursive call is what handles the function calling itself again. In the doSomething function, the recursive call is the line below.

-recursiveFunc(n-1)

#Recursion vs Loops
Recursion and loops work in similar ways. Every recursive function you write has an alternative solution with a loop.
Depending on the problem you're solving, you may choose one over the other.

#Recursive Tree

A recursive tree is basically a representative form of recursion which depicts how functions are called and returned as a series of events happening consecutively. 
It is a pictorial description of the process of recursion as illustrated below (arrows are bidirectional) : 
      F()
      /
    F()
    /
  F()

When a recursive call gets completed, the control returns back to its parent function which is then further executed until the last function waiting in the recursive stack returns.