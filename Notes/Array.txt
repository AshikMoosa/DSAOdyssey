#SubArrays 

-Longest contiguous part of array is called subarray
-Consider an array = [1,2,3] the subarrays are as follows:
-[1]
-[1,2]
-[1,2,3] - entire array is also a subarray
-[2]
-[2,3]
-[3] 

-To generate this, in brute force write 3 loops
- function subArray(arr,n) {
    let result= [];
    for (let i = 0; i < n; i++) {
        for (let j = i; j < n; j++) {
          let miniArray = [];
          for (let k = i; k <= j; k++) {
            miniArray.push(arr[k])
          }
          result.push(miniArray) 
        }
    }
    return result; // result is array of arrays [1] , [1,2] , & so on
  }

-CHATGPT 
The given program generates all possible subarrays of an input array `arr` of size `n`. 

Time Complexity:
1. The outermost loop runs from `i = 0` to `i = n-1`, so it has a time complexity of O(n).
2. The second loop runs from `j = i` to `j = n-1` for each `i`, so on average, it has a time complexity of O(n/2), which simplifies to O(n).
3. The innermost loop runs from `k = i` to `k = j`, where `j >= i`. In the worst case, this loop runs for `(n-1) + (n-2) + ... + 1 + 0` times, 
   which is equal to `(n * (n-1)) / 2`. Therefore, it has a time complexity of O(n^2).

The total time complexity is dominated by the O(n^2) innermost loop, so the overall time complexity of the program is O(n^3), where 'n' is the size of the input array.

Space Complexity:
1. The `result` array stores all the subarrays, and in the worst case, there can be (n * (n + 1)) / 2 subarrays generated, so the space complexity for storing these subarrays is O(n^2).
2. The `miniArray` array is used to store each subarray temporarily. In the worst case, it can have a size of 'n', so the space complexity for `miniArray` is O(n).

The space complexity of the program is dominated by the O(n^2) space used for storing subarrays in the `result` array. Therefore, the overall space complexity is O(n^2).

#Kadane's Algorithm for subarrays (check medium problem 4)

The intuition of the algorithm is not to consider the subarray as a part of the answer if its sum is less than 0. 
A subarray with a sum less than 0 will always reduce our answer and so this type of subarray cannot be a part of the subarray with maximum sum.

Here, we will iterate the given array with a single loop and while iterating we will add the elements in a sum variable. 
Now, if at any point the sum becomes less than 0, we will set the sum as 0 as we are not going to consider any subarray with a negative sum. 
Among all the sums calculated, we will consider the maximum one.

- function maxSubarraySum(arr, n) {
      let maxi = Number.MIN_SAFE_INTEGER; // maximum sum
      let sum = 0;
      for (let i = 0; i < n; i++) {
          sum += arr[i];

          if (sum > maxi) {
              maxi = sum;
          }

          // If sum < 0: discard the sum calculated
          if (sum < 0) {
              sum = 0;
          }
      }
      return maxi;
  }